---
import HeaderDefault from "../../components/HeaderDefault.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  // Fetch repository structure
  const repoResponse = await fetch("https://api.github.com/repos/jakubsob/r-tests-gallery/contents");
  const repoContents = await repoResponse.json();

  // Filter relevant directories
  const relevantDirs = repoContents.filter((item: any) =>
    item.type === "dir" &&
    !item.name.startsWith(".") &&
    item.name !== "renv"
  );

  // Generate paths for each directory
  const paths: any[] = [];

  for (const dir of relevantDirs) {
    // Get directory contents
    const dirResponse = await fetch(`https://api.github.com/repos/jakubsob/r-tests-gallery/contents/${dir.name}`);
    const dirContents = await dirResponse.json();

    // Try to get README content
    let readmeContent = "";
    try {
      const readmeResponse = await fetch(`https://raw.githubusercontent.com/jakubsob/r-tests-gallery/main/${dir.name}/README.md`);
      if (readmeResponse.ok) {
        readmeContent = await readmeResponse.text();
      }
    } catch (error) {
      console.log(`No README found for ${dir.name}`);
    }

    paths.push({
      params: { slug: dir.name },
      props: {
        dirName: dir.name,
        dirContents: dirContents,
        readmeContent: readmeContent
      }
    });
  }

  return paths;
}

const { dirName, dirContents, readmeContent } = Astro.props as {
  dirName: string;
  dirContents: any[];
  readmeContent: string;
};
---

<!doctype html>
<html lang="en">
  <BaseLayout title={`${dirName} - R Tests Gallery`}>
    <main>
      <HeaderDefault class="fixed top-0 z-10" />
      <section
        id="hero"
        class="bg-sky-700 bg-noise h-[30vh]
        relative
        overflow-hidden
        text-white
        grid
        items-center justify-items-center
        grid-cols-1 grid-rows-1
        p-4"
      >
        <div class="text-center text-white">
          <div class="mb-4">
            <a
              href="/r-tests-gallery"
              class="inline-flex items-center text-sky-200 hover:text-white transition-colors"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Back to R Tests Gallery
            </a>
          </div>
          <h1 class="text-white text-4xl py-4 font-syne tracking-wider capitalize">
            {dirName.replace(/-/g, ' ')}
          </h1>
          <h2 class="font-syne tracking-wider text-sky-200 text-lg">
            Testing Examples
          </h2>
        </div>
      </section>

      <section
        id="content"
        class="bg-white bg-noise-sky min-h-screen
        grid
        grid-cols-1
        lg:grid-cols-[1fr_minmax(80ch,_1fr)_1fr]
        py-8"
      >
        <div
          class="col-start-1 w-full max-w-[80ch] mx-auto px-4
          lg:col-start-2"
        >
          <!-- README Content -->
          {readmeContent && (
            <div class="prose prose-sky max-w-none mb-12">
              <div class="bg-slate-50 rounded-lg p-6 border border-slate-200">
                <h3 class="text-sky-700 font-syne mb-4">README</h3>
                <div class="text-slate-700 whitespace-pre-wrap text-sm font-mono">
                  {readmeContent}
                </div>
              </div>
            </div>
          )}

          <!-- File Browser -->
          <div class="space-y-6">
            <div class="flex items-center justify-between">
              <h3 class="text-2xl font-syne text-sky-700">Files</h3>
              <a
                href={`https://github.com/jakubsob/r-tests-gallery/tree/main/${dirName}`}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center px-3 py-1.5 border border-slate-300 text-sm font-medium rounded-md text-slate-700 bg-white hover:bg-slate-50 transition-colors"
              >
                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
                View on GitHub
              </a>
            </div>

            <div class="bg-white border border-slate-200 rounded-lg overflow-hidden">
              <div class="bg-slate-50 border-b border-slate-200 px-4 py-3">
                <h4 class="text-sm font-medium text-slate-700">File Browser</h4>
              </div>
              <div class="divide-y divide-slate-200">
                {dirContents.map((file: any) => (
                  <div class="px-4 py-3 hover:bg-slate-50 transition-colors">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-slate-100 rounded-lg flex items-center justify-center">
                          {file.type === "dir" ? (
                            <svg class="w-4 h-4 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z"></path>
                            </svg>
                          ) : (
                            <svg class="w-4 h-4 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                          )}
                        </div>
                        <div>
                          <div class="text-sm font-medium text-slate-900">
                            {file.name}
                          </div>
                          <div class="text-xs text-slate-500">
                            {file.type === "dir" ? "Directory" : `File â€¢ ${Math.round(file.size / 1024)} KB`}
                          </div>
                        </div>
                      </div>
                      <div class="flex items-center space-x-2">
                        <a
                          href={file.html_url}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center px-2 py-1 text-xs font-medium text-sky-600 bg-sky-50 rounded hover:bg-sky-100 transition-colors"
                        >
                          <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                          </svg>
                          View
                        </a>
                        {file.type === "file" && file.download_url && (
                          <a
                            href={file.download_url}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="inline-flex items-center px-2 py-1 text-xs font-medium text-slate-600 bg-slate-50 rounded hover:bg-slate-100 transition-colors"
                          >
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            Raw
                          </a>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <!-- File Content Preview for key files -->
          {dirContents.filter((file: any) =>
            file.type === "file" &&
            (file.name.endsWith('.R') || file.name.endsWith('.r') || file.name === 'DESCRIPTION')
          ).slice(0, 3).map(async (file: any) => {
            let content = "";
            try {
              if (file.download_url) {
                const response = await fetch(file.download_url);
                if (response.ok) {
                  content = await response.text();
                }
              }
            } catch (error) {
              console.log(`Error fetching ${file.name}:`, error);
            }

            return content && (
              <div class="mt-8 bg-white border border-slate-200 rounded-lg overflow-hidden">
                <div class="bg-slate-50 border-b border-slate-200 px-4 py-3">
                  <h4 class="text-sm font-medium text-slate-700">{file.name}</h4>
                </div>
                <div class="p-4">
                  <pre class="text-sm text-slate-700 whitespace-pre-wrap bg-slate-50 p-4 rounded overflow-x-auto">
                    <code>{content}</code>
                  </pre>
                </div>
              </div>
            );
          })}
        </div>
      </section>
    </main>
  </BaseLayout>
</html>
