---
import { createMarkdownProcessor } from "@astrojs/markdown-remark";
import { Section } from "@/components/ui/section";
import { SubscribeButton } from "@/components/ui/subscribe-button.tsx";
import { DirectoryListing } from "../../components/DirectoryListing.tsx";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { Button } from "@/components/ui/button";
import { ExternalLink, Sparkles, Info } from "lucide-react";

// Create markdown processor with the same config as astro.config.mjs
const markdownProcessor = await createMarkdownProcessor({
  syntaxHighlight: "shiki",
  shikiConfig: {
    theme: "github-dark",
    langs: [],
    wrap: true,
    transformers: [],
  },
});

// Helper function to render markdown inline (for titles/descriptions)
const renderInlineMarkdown = async (content: string) => {
  try {
    const result = await markdownProcessor.render(content);
    // Remove wrapping <p> tags for inline content
    return result.code.replace(/^<p>|<\/p>$/g, "").trim();
  } catch (error) {
    console.error("Error rendering markdown:", error);
    return content;
  }
};

// GitHub API authentication for higher rate limits
const GITHUB_TOKEN = import.meta.env.PRIVATE_GITHUB_TOKEN;
const headers = GITHUB_TOKEN ? { Authorization: `token ${GITHUB_TOKEN}` } : {};

// Fetch the main README content
let readmeContent = "";
try {
  const readmeResponse = await fetch(
    "https://raw.githubusercontent.com/jakubsob/r-tests-gallery/main/README.md"
  );
  if (readmeResponse.ok) {
    readmeContent = await readmeResponse.text();
  } else {
    console.error(
      "Failed to fetch README:",
      readmeResponse.status,
      readmeResponse.statusText
    );
  }
} catch (error) {
  console.error("Error fetching README:", error);
}

// Use GitHub Tree API - single API call for entire repo structure
let relevantDirs: any[] = [];
try {
  const treeResponse = await fetch(
    "https://api.github.com/repos/jakubsob/r-tests-gallery/git/trees/main?recursive=1",
    { headers }
  );

  if (treeResponse.ok) {
    const treeData = await treeResponse.json();

    // Extract top-level directories from the tree
    const directories = new Set<string>();

    treeData.tree.forEach((item: any) => {
      if (item.type === "tree" && item.path) {
        // Only get top-level directories (no nested paths)
        const topLevelDir = item.path.split("/")[0];
        if (!topLevelDir.startsWith(".") && topLevelDir !== "renv") {
          directories.add(topLevelDir);
        }
      }
    });

    // Convert to array with structure similar to contents API
    relevantDirs = Array.from(directories).map((dirName) => ({
      name: dirName,
      type: "dir",
      path: dirName,
    }));

    // Fetch README files for each directory
    for (const dir of relevantDirs) {
      try {
        const readmeResponse = await fetch(
          `https://raw.githubusercontent.com/jakubsob/r-tests-gallery/main/${dir.name}/README.md`,
          { headers }
        );
        if (readmeResponse.ok) {
          const readmeText = await readmeResponse.text();

          // Parse the README content
          const parseReadme = (content: string) => {
            const lines = content.split("\n");
            let title = dir.name.replace(/-/g, " "); // Default fallback
            let description = ""; // Default fallback
            let fullContent = content;

            // Find the first header (title)
            const titleMatch = lines.find((line) => line.startsWith("#"));
            if (titleMatch) {
              title = titleMatch.replace(/^#+\s*/, "").trim();
            }

            // Find the paragraph after "## When to use this pattern?"
            let foundWhenToUse = false;
            let descriptionLines: string[] = [];

            for (const line of lines) {
              if (line.startsWith("## When to use this pattern?")) {
                foundWhenToUse = true;
                continue;
              }

              if (foundWhenToUse) {
                if (line.startsWith("#")) {
                  break; // Stop at next header
                }

                if (line.trim()) {
                  descriptionLines.push(line.trim());
                } else if (descriptionLines.length > 0) {
                  break; // Stop at first empty line after content
                }
              }
            }

            if (descriptionLines.length > 0) {
              description = descriptionLines.join(" ").trim();
            }

            return { title, description, fullContent };
          };

          const parsed = parseReadme(readmeText);
          // Render title and description as HTML
          const titleHtml = await renderInlineMarkdown(parsed.title);
          const descriptionHtml = await renderInlineMarkdown(
            parsed.description
          );

          dir.readme = {
            ...parsed,
            titleHtml,
            descriptionHtml,
          };
        } else {
          // Fallback if no README found
          const title = dir.name.replace(/-/g, " ");
          const description = "";
          dir.readme = {
            title,
            description,
            fullContent: "No README available.",
            titleHtml: await renderInlineMarkdown(title),
            descriptionHtml: await renderInlineMarkdown(description),
          };
        }
      } catch (error) {
        console.error(`Error fetching README for ${dir.name}:`, error);
        // Fallback if fetch fails
        const title = dir.name.replace(/-/g, " ");
        const description = "";
        dir.readme = {
          title,
          description,
          fullContent: "No README available.",
          titleHtml: await renderInlineMarkdown(title),
          descriptionHtml: await renderInlineMarkdown(description),
        };
      }
    }

    console.log("Found directories:", relevantDirs);
  } else {
    console.error(
      "GitHub Tree API request failed:",
      treeResponse.status,
      treeResponse.statusText
    );
  }
} catch (error) {
  console.error("Error fetching repository tree:", error);
}
---

<BaseLayout title="R Tests Gallery">
  <Section id="hero" variant="dark" size="md">
    <div class="container mx-auto h-full grid place-items-center">
      <div
        class="text-center text-white max-w-[65ch] flex flex-col items-center"
      >
        <h1 class="text-white text-4xl py-4 font-syne tracking-wider">
          The R Tests Gallery
        </h1>
        <h2
          class="font-syne tracking-wider text-sky-200 text-lg text-balance space-y-2"
        >
          <p>
            It's a collection of testing patterns I've successfully used in
            production.
          </p>
          <p>
            The collection will grow over time, so subscribe to stay updated!
          </p>
        </h2>
        <SubscribeButton className="mt-6" />
        <span class="text-sky-200 text-sm mt-2">
          <Info className="size-4 inline-block" />
          Subscription also gives you updates from the blog
        </span>
      </div>
    </div>
  </Section>
  <Section id="content" variant="light" size="md">
    <div class="container mx-auto h-full grid place-items-center max-w-[65ch]">
      <div class="w-full">
        <h3
          class="text-3xl font-syne text-sky-700 mb-6 flex gap-2 align-baseline"
        >
          <Sparkles className="size-8 inline-block" />
          Examples
        </h3>
        <DirectoryListing directories={relevantDirs} />
      </div>
    </div>
  </Section>
  <Section variant="light" size="md">
    <div class="container mx-auto h-full grid max-w-[65ch]">
      <div class="border-t border-slate-200 py-24">
        <h3
          class="text-3xl font-syne text-sky-700 mb-6 flex gap-2 align-baseline"
        >
          <div class="size-8">
            <svg
              width="100%"
              height="100%"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              ><path
                d="M12 2V22M19.0711 4.92893L4.92893 19.0711M22 12H2M19.0711 19.0711L4.92893 4.92893"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path></svg
            >
          </div>
          Haven't found what you're looking for?
        </h3>
        <p class="text-slate-600 mb-8 text-balance">
          Tell me what you struggle with in R testing. <br /> Let's create a comprehensive
          list of examples together!
        </p>
        <Button variant="pill" size="xl">
          <a
            href="https://github.com/jakubsob/r-tests-gallery/issues/new/choose"
            target="_blank"
            class="flex items-center gap-2"
            rel="noopener noreferrer"
          >
            <ExternalLink className="size-6" />
            <span>Submit a request</span>
          </a>
        </Button>
      </div>
    </div>
  </Section>
</BaseLayout>
