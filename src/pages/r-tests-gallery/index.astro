---
import HeaderDefault from "../../components/HeaderDefault.astro";
import SubscribeButton from "../../components/SubscribeButton.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { createMarkdownProcessor } from "@astrojs/markdown-remark";

// Create markdown processor with the same config as astro.config.mjs
const markdownProcessor = await createMarkdownProcessor({
  syntaxHighlight: "shiki",
  shikiConfig: {
    theme: "github-dark",
    langs: [],
    wrap: true,
    transformers: [],
  },
});

// Helper function to render markdown inline (for titles/descriptions)
const renderInlineMarkdown = async (content: string) => {
  try {
    const result = await markdownProcessor.render(content);
    // Remove wrapping <p> tags for inline content
    return result.code.replace(/^<p>|<\/p>$/g, "").trim();
  } catch (error) {
    console.error("Error rendering markdown:", error);
    return content;
  }
};

// GitHub API authentication for higher rate limits
const GITHUB_TOKEN = import.meta.env.GITHUB_TOKEN;
const headers = GITHUB_TOKEN ? { Authorization: `token ${GITHUB_TOKEN}` } : {};

// Fetch the main README content
let readmeContent = "";
try {
  const readmeResponse = await fetch(
    "https://raw.githubusercontent.com/jakubsob/r-tests-gallery/main/README.md"
  );
  if (readmeResponse.ok) {
    readmeContent = await readmeResponse.text();
  } else {
    console.error(
      "Failed to fetch README:",
      readmeResponse.status,
      readmeResponse.statusText
    );
  }
} catch (error) {
  console.error("Error fetching README:", error);
}

// Use GitHub Tree API - single API call for entire repo structure
let relevantDirs: any[] = [];
try {
  const treeResponse = await fetch(
    "https://api.github.com/repos/jakubsob/r-tests-gallery/git/trees/main?recursive=1",
    { headers }
  );

  if (treeResponse.ok) {
    const treeData = await treeResponse.json();

    // Extract top-level directories from the tree
    const directories = new Set<string>();

    treeData.tree.forEach((item: any) => {
      if (item.type === "tree" && item.path) {
        // Only get top-level directories (no nested paths)
        const topLevelDir = item.path.split("/")[0];
        if (!topLevelDir.startsWith(".") && topLevelDir !== "renv") {
          directories.add(topLevelDir);
        }
      }
    });

    // Convert to array with structure similar to contents API
    relevantDirs = Array.from(directories).map((dirName) => ({
      name: dirName,
      type: "dir",
      path: dirName,
    }));

    // Fetch README files for each directory
    for (const dir of relevantDirs) {
      try {
        const readmeResponse = await fetch(
          `https://raw.githubusercontent.com/jakubsob/r-tests-gallery/main/${dir.name}/README.md`,
          { headers }
        );
        if (readmeResponse.ok) {
          const readmeText = await readmeResponse.text();

          // Parse the README content
          const parseReadme = (content: string) => {
            const lines = content.split("\n");
            let title = dir.name.replace(/-/g, " "); // Default fallback
            let description = "Testing example project."; // Default fallback
            let fullContent = content;

            // Find the first header (title)
            const titleMatch = lines.find((line) => line.startsWith("#"));
            if (titleMatch) {
              title = titleMatch.replace(/^#+\s*/, "").trim();
            }

            // Find the first paragraph after the title
            let foundTitle = false;
            let descriptionLines: string[] = [];

            for (const line of lines) {
              if (line.startsWith("#")) {
                if (foundTitle) {
                  break; // Stop at next header
                }
                foundTitle = true;
                continue;
              }

              if (foundTitle && line.trim()) {
                descriptionLines.push(line.trim());
              } else if (
                foundTitle &&
                !line.trim() &&
                descriptionLines.length > 0
              ) {
                break; // Stop at first empty line after content
              }
            }

            if (descriptionLines.length > 0) {
              description = descriptionLines.join(" ").trim();
            }

            return { title, description, fullContent };
          };

          const parsed = parseReadme(readmeText);
          // Render title and description as HTML
          const titleHtml = await renderInlineMarkdown(parsed.title);
          const descriptionHtml = await renderInlineMarkdown(
            parsed.description
          );

          dir.readme = {
            ...parsed,
            titleHtml,
            descriptionHtml,
          };
        } else {
          // Fallback if no README found
          const title = dir.name.replace(/-/g, " ");
          const description = "Testing example project.";
          dir.readme = {
            title,
            description,
            fullContent: "No README available.",
            titleHtml: await renderInlineMarkdown(title),
            descriptionHtml: await renderInlineMarkdown(description),
          };
        }
      } catch (error) {
        console.error(`Error fetching README for ${dir.name}:`, error);
        // Fallback if fetch fails
        const title = dir.name.replace(/-/g, " ");
        const description = "Testing example project.";
        dir.readme = {
          title,
          description,
          fullContent: "No README available.",
          titleHtml: await renderInlineMarkdown(title),
          descriptionHtml: await renderInlineMarkdown(description),
        };
      }
    }

    console.log("Found directories:", relevantDirs);
  } else {
    console.error(
      "GitHub Tree API request failed:",
      treeResponse.status,
      treeResponse.statusText
    );
  }
} catch (error) {
  console.error("Error fetching repository tree:", error);
}
---

<!doctype html>
<html lang="en">
  <BaseLayout title="R Tests Gallery">
    <main
      class="bg-marine-50"
      style="
    z-index: 0;
    opacity: 1;
    mix-blend-mode: overlay;
    background-image: url(/noise-sky.svg);
    background-position: 0 0;
    background-repeat: repeat-y;
    background-size: contain;
    background-attachment: scroll;
    inset: 0%;"
    >
      <HeaderDefault />
      <section
        id="hero"
        class="bg-sky-700 bg-noise h-[60vh]
        relative
        overflow-hidden
        text-white
        grid
        items-center justify-items-center
        grid-cols-1 grid-rows-1
        p-4"
      >
        <div
          class="text-center text-white max-w-[65ch] flex flex-col items-center"
        >
          <h1 class="text-white text-4xl py-4 font-syne tracking-wider">
            The R Tests Gallery
          </h1>
          <h2
            class="font-syne tracking-wider text-sky-200 text-lg text-balance space-y-2"
          >
            <p>
              It's a collection of testing patterns I've successfully used in
              production.
            </p>
            <p>
              The collection will grow over time, so subscribe to stay updated!
            </p>
          </h2>
          <SubscribeButton class="mt-6" />
          <p class="text-sky-200 text-sm mt-2">
            Subscription also gives you updates from the blog
          </p>
        </div>
      </section>

      <section
        id="content"
        class="bg-white bg-noise-sky
        grid
        grid-cols-1
        lg:grid-cols-[1fr_minmax(65ch,_1fr)_1fr]
        py-24"
      >
        <div
          class="col-start-1 w-full max-w-[65ch] mx-auto
          lg:col-start-2"
        >
          <!-- Directory Listing -->
          <div class="space-y-6">
            <h3 class="text-3xl font-syne text-sky-700 mb-6">Examples</h3>

            {
              relevantDirs.length > 0 ? (
                relevantDirs.map((dir: any) => (
                  <div class="bg-white rounded-lg border border-slate-200 shadow-sm hover:shadow-md transition-shadow relative group">
                    <div class="p-6">
                      <div class="grid grid-cols-1 gap-2">
                        <div class="flex items-center space-x-3 md:col-span-2">
                          <div>
                            <h4
                              class="text-lg font-medium text-slate-900 capitalize"
                              set:html={
                                dir.readme?.titleHtml ||
                                dir.name.replace(/-/g, " ")
                              }
                            />
                            <p
                              class="text-slate-500 text-sm line-clamp-5 group-hover:line-clamp-none transition-all duration-300"
                              set:html={
                                dir.readme?.descriptionHtml ||
                                "Testing example project."
                              }
                            />
                          </div>
                        </div>
                        <div class="flex items-center space-x-2">
                          <a
                            href={`/r-tests-gallery/${dir.name}`}
                            class="inline-flex items-center px-3 py-1.5 border text-sm font-medium rounded-md text-white bg-sky-700 hover:bg-ocean-green-500 transition-colors"
                          >
                            <svg
                              class="w-4 h-4 mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                              />
                            </svg>
                            Browse
                          </a>
                          <a
                            href={`https://github.com/jakubsob/r-tests-gallery/tree/main/${dir.name}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="inline-flex items-center px-3 py-1.5 border border-slate-300 text-sm font-medium rounded-md text-slate-700 bg-white hover:bg-slate-50 transition-colors"
                          >
                            <svg
                              class="w-4 h-4 mr-1"
                              fill="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                            </svg>
                            Open on GitHub
                          </a>{" "}
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div class="bg-white rounded-lg border border-red-200 shadow-sm">
                  <div class="p-6 text-center">
                    <div class="text-red-500 mb-4">
                      <svg
                        class="w-16 h-16 mx-auto mb-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                      <h3 class="text-xl font-medium text-red-700 mb-2">
                        Unable to Load Repository Data
                      </h3>
                      <p class="text-red-600 max-w-md mx-auto">
                        There was an error fetching the repository contents.
                        This could be due to GitHub API rate limits or network
                        issues.
                      </p>
                    </div>
                    <div class="mt-6">
                      <a
                        href="https://github.com/jakubsob/r-tests-gallery"
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
                      >
                        <svg
                          class="w-4 h-4 mr-2"
                          fill="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                        </svg>
                        Visit GitHub Repository
                      </a>
                    </div>
                  </div>
                </div>
              )
            }
          </div>
        </div>
      </section>
      <section
        class="bg-white bg-noise-sky min-h-[50vh]
        grid
        grid-cols-1
        lg:grid-cols-[1fr_minmax(65ch,_1fr)_1fr]"
      >
        <div class="mx-auto col-start-2 border-t border-slate-200 py-24">
          <h3
            class="text-3xl font-syne text-sky-700 mb-6 flex gap-2 align-baseline"
          >
            <div class="size-8">
              <svg
                width="100%"
                height="100%"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                ><path
                  d="M12 2V22M19.0711 4.92893L4.92893 19.0711M22 12H2M19.0711 19.0711L4.92893 4.92893"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path></svg
              >
            </div>
            Haven't found what you're looking for?
          </h3>
          <p class="text-slate-600">
            Tell me what you struggle with in R testing, let's create a
            comprehensive list of examples together!
          </p>
          <a
            href="https://github.com/jakubsob/r-tests-gallery/issues/new/choose"
            target="_blank"
            class="inline-flex mt-4 rounded-full px-6 py-4 bg-sky-700 text-white text-xl w-fit
              transition-all duration-300
              border-2 border-transparent
              hover:text-sky-900 hover:bg-white hover:border-sky-700"
          >
            Submit a request
          </a>
        </div>
      </section>
    </main>
  </BaseLayout>
</html>
