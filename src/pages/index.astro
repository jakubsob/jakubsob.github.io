---
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import PostList from "../components/PostList.jsx";
import CodeBlock from "../components/CodeBlock.astro";
import { Button } from "@/components/ui/button";
import { Section } from "@/components/ui/section";
import { Animate } from "@/components/ui/animate";
import { ArrowDownLeft, Asterisk, ArrowDown } from "lucide-react";

const posts = (await getCollection("blog"))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .filter((post) => post.data.draft !== true)
  .filter((_, index) => index < 3);
---

<BaseLayout>
  <style>
    .letter-hover {
      transition: all 0.3s ease;
    }
    .letter-hover-green {
      transition: all 0.3s ease;
    }

    .letter-hover:hover {
      color: var(--color-red-500) !important;
      filter: blur(0.01em);
    }
    .letter-hover-green:hover {
      transform: scale(1.1);
      color: var(--color-ocean-green-700) !important;
    }
    .letter-hover:hover {
      color: var(--color-red-500) !important;
      transform: scale(1.1);
      filter: blur(0.01em);
    }

    .cursor-button {
      position: fixed;
      pointer-events: none;
      opacity: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      transition: opacity 0.5s ease;
    }

    .cursor-button.visible {
      opacity: 0.9;
    }
  </style>
  <Section variant="dark" size="full" id="hero">
    <div class="h-screen w-screen relative overflow-hidden">
      <button
        class="cursor-button fixed z-10 size-36 rounded-full bg-ocean-green-300 uppercase text-xl backdrop-blur-lg hidden md:visible"
        id="cursor-button"
      >
        Read blog
      </button>
      <div
        id="circle"
        class="absolute z-0 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-gradient-to-b from-background to-ocean-green-700 opacity-10 size-[70vw] md:size-[70vh] rounded-full"
      >
      </div>
      <div
        id="circle"
        class="absolute z-0 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-gradient-to-b from-background to-ocean-green-800 opacity-20 size-[100vw] md:size-[100vh] rounded-full"
      >
      </div>
      <div
        class="absolute z-0 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
      >
        <h1
          class="text-[clamp(12vw,15vw,15em)] uppercase text-white leading-[0.8em] space-y-1 bg-blend-multiply relative"
          id="hero-h1"
        >
          <a href="/blog">
            <Animate variant="header">
              <span class="tracking-[0.02em] leading-[0.8em] flex items-center">
                <Asterisk
                  className="letter-hover inline-block size-[1em] text-red-500"
                />
                <span class="letter-hover">B</span>
                <span class="letter-hover">u</span>
                <span class="letter-hover">i</span>
                <span class="letter-hover">l</span>
                <span class="letter-hover">d</span>
                <span class="letter-hover">i</span>
                <span class="letter-hover">n</span>
                <span class="letter-hover">g</span>
              </span>
            </Animate>
            <Animate variant="header" className="motion-delay-[200ms]">
              <span
                class="text-ocean-green-100 font-bolder italic font-serif leading-[1em] tracking-[0.1em] flex items-center"
              >
                <span class="letter-hover-green">q</span>
                <span class="letter-hover-green">u</span>
                <span class="letter-hover-green">a</span>
                <span class="letter-hover-green">l</span>
                <span class="letter-hover-green">i</span>
                <span class="letter-hover-green">t</span>
                <span class="letter-hover-green">y</span>
                <ArrowDownLeft
                  className="letter-hover-green inline-block size-[1em]"
                />
              </span>
            </Animate>
            <Animate variant="header" className="motion-delay-[400ms]">
              <span class="text-nowrap flex items-center">
                <span class="letter-hover">b</span>
                <span class="letter-hover">y</span>
                <span class="letter-hover">&nbsp;</span>
                <span class="letter-hover">t</span>
                <span class="letter-hover">e</span>
                <span class="letter-hover">s</span>
                <span class="letter-hover">t</span>
                <span class="letter-hover">i</span>
                <span class="letter-hover">n</span>
                <span class="letter-hover">g</span>
              </span>
            </Animate>
          </a>
          <div
            class="visible md:hidden absolute -bottom-10 left-1/2 -translate-x-1/2 translate-y-full md:max-w-[400px]"
          >
            <Animate variant="expand" className="motion-delay-[600ms]">
              <Button
                variant="default"
                size="xl"
                className="bg-primary text-xl uppercase w-full"
              >
                <a href="/blog"> Read blog </a>
              </Button>
            </Animate>
          </div>
        </h1>
      </div>
    </div>
    <Animate variant="header" className="motion-delay-[1000ms]">
      <a
        href="#blog"
        class="cursor-pointer text-sky-200 border-sky-200 absolute bottom-0 left-1/2 -translate-x-1/2 size-8 mb-2 rounded-full border-2"
      >
        <ArrowDown className="block size-full" />
      </a>
    </Animate>
  </Section>
  <Section id="blog" size="fit" variant="light">
    <div class="py-40 space-y-52">
      <div class="container grid grid-cols-1 md:grid-cols-2">
        <div class="mb-12">
          <Animate>
            <h2 class="flex text-6xl uppercase">New on the blog</h2>
          </Animate>
        </div>
        <div class="order-3 mt-12 md:order-2 md:self-end">
          <Animate>
            <a href="/blog">
              <Button variant="pill" size="xl"> Read more â†’</Button>
            </a>
          </Animate>
        </div>
        <div class="h-full max-w-[65ch] row-span-2">
          <PostList client:load posts={posts} showControls={false} />
        </div>
      </div>
    </div>
  </Section>
  <Section id="opensource" size="fit" variant="dark">
    <div class="container mx-auto flex justify-center">
      <Animate>
        <h2
          class="text-[clamp(2em,5vw,6em)] uppercase pt-40 pb-20 flex items-center"
        >
          <Asterisk className="inline-block size-[1em] text-red-500 mr-4" />
          <span>My Open Source</span>
          <Asterisk className="inline-block size-[1em] text-red-500 mr-4" />
        </h2>
      </Animate>
    </div>
  </Section>
  <Section id="cucumber" size="fit" variant="dark">
    <div class="pb-40 pt-40">
      <div class="container grid grid-cols-1 md:grid-cols-[1fr_1fr] gap-12">
        <div>
          <Animate>
            <a
              href="https://github.com/jakubsob/cucumber"
              class="hover:underline"
            >
              <h3 class="text-5xl uppercase mb-12 flex items-center gap-4">
                <div class="size-[100px] flex-shrink-0">
                  <img
                    class="w-full h-full object-contain"
                    src="https://raw.githubusercontent.com/jakubsob/cucumber/main/man/figures/logo.png"
                    alt="cucumber logo"
                    width="100"
                    height="100"
                  />
                </div>
                {"Cucumber"}
              </h3>
            </a>
          </Animate>
          <Animate>
            <CodeBlock
              code={`# tests/testthat/sales_trends.feature
  Feature: View Sales Trends
    Scenario: User views the sales trend for a product category
      Given the user can view product sales information
      When they view the sales trend for "Electronics"
      Then they should see the sales trend plot for "Electronics"

    Scenario: User views the sales trend for a specific product
      Given the user can view product sales information
      When they view the sales trend for "Smartphone"
      Then they should see the sales trend plot for "Smartphone"`}
              lang="gherkin"
            />
          </Animate>
        </div>
        <div class="max-w-[65ch] space-y-8 font-light">
          <div class="space-y-6">
            <Animate>
              <h4
                class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
              >
                <div>Human-readable tests</div>
                <div>01</div>
              </h4>
              <p class="text-sky-200">
                Write tests in plain language that stakeholders and users can
                understand, review, and validate.
              </p>
            </Animate>
            <Animate>
              <h4
                class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
              >
                <div>Bridge communication gaps</div>
                <div>02</div>
              </h4>
              <p class="text-sky-200">
                Enable collaboration between developers, testers, and business
                analysts by using a common language.
              </p>
            </Animate>
            <Animate>
              <h4
                class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
              >
                <div>Living documentation</div>
                <div>03</div>
              </h4>
              <p class="text-sky-200">
                Your tests become executable documentation that always stays
                up-to-date with your code.
              </p>
            </Animate>
            <Animate>
              <h4
                class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
              >
                <div>Behavior-driven development</div>
                <div>04</div>
              </h4>
              <p class="text-sky-200">
                Focus on the behavior of your software rather than its
                implementation details.
              </p>
            </Animate>
            <Animate>
              <h4
                class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
              >
                <div>Reusable step definitions</div>
                <div>05</div>
              </h4>
              <p class="text-sky-200">
                Create a library of reusable test steps that can be combined to
                create complex scenarios.
              </p>
            </Animate>
          </div>
        </div>
      </div>
    </div>
  </Section>
  <Section id="muttest" size="fit" variant="dark">
    <div class="pb-40 pt-40">
      <div class="container grid grid-cols-1 md:grid-cols-[1fr_1fr] gap-12">
        <div class="order-1 md:order-2 max-w-[65ch] space-y-8 font-light">
          <div>
            <Animate>
              <a
                href="https://github.com/jakubsob/muttest"
                class="hover:underline"
              >
                <h3 class="text-5xl uppercase mb-12 flex items-center gap-4">
                  <div class="size-[100px] flex-shrink-0">
                    <img
                      class="w-full h-full object-contain"
                      src="https://raw.githubusercontent.com/jakubsob/muttest/main/man/figures/logo.png"
                      alt="muttest logo"
                      width="100"
                      height="100"
                    />
                  </div>
                  {"Muttest"}
                </h3>
              </a>
            </Animate>
            <Animate>
              <CodeBlock
                code={`plan <- muttest::plan(
  mutators = list(
    muttest::operator("+", "-"),
    muttest::operator("-", "+"),
    muttest::operator("*", "/"),
    muttest::operator("/", "*"),
    muttest::operator("==", "!="),
    muttest::operator("!=", "==")
  )
)
muttest::muttest(plan)`}
                lang="r"
              />
            </Animate>
          </div>
        </div>
        <div class="order-1 space-y-6">
          <Animate>
            <h4
              class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
            >
              <div>Identify test gaps</div>
              <div>01</div>
            </h4>
            <p class="text-sky-200">
              Discover weak spots in your test suite by introducing small
              changes to your code and checking if tests catch them.
            </p>
          </Animate>
          <Animate>
            <h4
              class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
            >
              <div>Quality over quantity</div>
              <div>02</div>
            </h4>
            <p class="text-sky-200">
              Focus on test effectiveness rather than just coverage percentages.
              Muttest reveals if your tests actually validate behavior.
            </p>
          </Animate>
          <Animate>
            <h4
              class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
            >
              <div>Automated mutation testing</div>
              <div>03</div>
            </h4>
            <p class="text-sky-200">
              Systematically introduce mutations to your code and run tests to
              measure how well they detect changes.
            </p>
          </Animate>
          <Animate>
            <h4
              class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
            >
              <div>Improve test reliability</div>
              <div>04</div>
            </h4>
            <p class="text-sky-200">
              Build more robust test suites that actually catch bugs and
              regressions in your R code.
            </p>
          </Animate>
          <Animate>
            <h4
              class="text-xl font-semibold mb-2 border-b-2 border-b-white flex items-center justify-between"
            >
              <div>Confidence in refactoring</div>
              <div>05</div>
            </h4>
            <p class="text-sky-200">
              Refactor code with confidence knowing your tests will catch any
              breaking changes.
            </p>
          </Animate>
        </div>
      </div>
    </div>
  </Section>
  <!-- <Section id="testimonials">
    <div class="rounded-lg p-10 bg-background text-white w-full max-w-[65ch]">
      <div class="text-xl mb-5">
        <img
          src="fa_quote-left.svg"
          class="pb-4 opacity-50 size-10"
          alt="Double quotes"
          width="50"
          height="50"
        />
        <span>
          "[...] many thought provoking posts that he has on his blog [...]"
        </span>
      </div>
      <p class="text-md text-sky-100">
        Eric Nantz,
        <a
          class="text-sky-100 underline"
          href="https://serve.podhome.fm/episodepage/r-weekly-highlights/issue-2024-w43-highlights"
        >
          R Weekly Podcast, Issue 2024-W43
        </a>
      </p>
    </div>
  </Section> -->
  <Section id="about" size="fit" variant="light">
    <div class="pb-40 pt-40 space-y-40">
      <div class="container grid grid-cols-1 md:grid-cols-2">
        <Animate>
          <h2 class="text-6xl uppercase mb-12">I'm Jakub Sobolewski</h2>
        </Animate>
        <Animate>
          <div class="max-w-[65ch] space-y-8 font-light">
            <p>
              Iâ€™m a software engineer specializing in R with 5+ years of
              experience.
            </p>
            <p>
              I believe automated testing is the key to building quality
              software.
            </p>
            <p>
              My journey into R testing began with a project where to develop
              code, you had to be connected to the production environment. Turns
              out, it was a terrible developer experience.
            </p>
            <p>
              I'm particularly passionate about knowledge sharing, which is why
              I maintain an active blog and R Tests Gallery. I believe that when
              we share our testing experiencesâ€”both successes and failuresâ€”we
              all become better developers.
            </p>
            <p>
              I approach testing with a practical mindset: tests should make
              development faster and more confident, not slower and more
              burdensome. My goal is to help teams find testing strategies that
              actually enhance their workflow.
            </p>
          </div>
        </Animate>
      </div>
    </div>
  </Section>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/motion@11.11.13/dist/motion.js"></script>
  <script is:inline>
    const hero = document.getElementById("hero");
    const heroH1 = document.getElementById("hero-h1");
    const cursorButton = document.getElementById("cursor-button");

    if (hero && cursorButton) {
      let isHovering = false;

      hero.addEventListener("mouseenter", () => {
        isHovering = true;
      });

      hero.addEventListener("mouseleave", () => {
        isHovering = false;
      });

      heroH1.addEventListener("mouseenter", () => {
        cursorButton.classList.add("visible");
      });

      heroH1.addEventListener("mouseleave", () => {
        cursorButton.classList.remove("visible");
      });

      hero.addEventListener("mousemove", (e) => {
        if (isHovering) {
          // Use clientX and clientY for absolute positioning relative to viewport
          cursorButton.style.left =
            e.clientX - cursorButton.getBoundingClientRect().width / 2 + "px";
          cursorButton.style.top =
            e.clientY - cursorButton.getBoundingClientRect().height / 2 + "px";

          // Mutate button color based on mouse movement
          const h1Rect = heroH1.getBoundingClientRect();
          const normalizedX = (e.clientX - h1Rect.left) / h1Rect.width;
          const normalizedY = (e.clientY - h1Rect.top) / h1Rect.height;

          const hue = Math.floor(normalizedX * 10);
          const saturation = Math.floor(50 + normalizedY * 100);
          const lightness = Math.floor(40 + normalizedX * 20);

          cursorButton.style.backgroundColor = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
        }
      });
    }
  </script>
</BaseLayout>
