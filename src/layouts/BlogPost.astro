---
import BaseLayout from "./BaseLayout.astro";
import BlogPostJSONLD from "../components/BlogPostJSONLD.astro";
import FormattedDate from "../components/FormattedDate";
import PillButton from "../components/PillButton";
import SubscribeButton from "../components/SubscribeButton.astro";
import Header from "../components/Header.astro";
import HeaderLink from "../components/HeaderLink.astro";
import HeaderLogo from "../components/HeaderLogo.astro";
import HeaderButton from "../components/HeaderButton.astro";
import { getReadingTime } from "../utils/getReadingTime";

const { post } = Astro.props;
const readingTime = getReadingTime(post.body);
const { title, description, pubDate, updatedDate, tags } = post.data;
---

<html lang="en">
  <BaseLayout {...post.data}>
    <BlogPostJSONLD slot="head" {...post.data} />
    <main
      class="bg-marine-50"
      style="
        z-index: 0;
        opacity: 1;
        mix-blend-mode: overlay;
        background-image: url(/noise-sky.svg);
        background-position: 0 0;
        background-repeat: repeat-y;
        background-size: contain;
        background-attachment: scroll;
        inset: 0%;"
    >
      <Header>
        <HeaderLogo class="text-black">jakub::sobolewski</HeaderLogo>
        <HeaderLink class="text-black" href="/">home</HeaderLink>
        <HeaderLink class="text-black" href="/blog/">blog</HeaderLink>
        <HeaderLink class="text-black" href="/resources/">resources</HeaderLink>
        <HeaderButton
          href="https://jakubsobolewski.substack.com/subscribe"
          class="text-black ms-auto"
          id="subscribe"
        >
          subscribe
        </HeaderButton>
      </Header>
      <article
        class="prose
          prose-h1:capitalize
          prose-h1:mb-2
          prose-h1:font-medium
          prose-h2:font-normal
          prose-h2:mb-4
          prose-h2:mt-3
          prose-p:my-2
          prose-pre:font-code
          prose-pre:rounded-none
          prose-blockquote:font-light
          prose-img:w-full
          mx-auto px-2"
      >
        <header class="border-b-[1px] border-solid border-gray-400 pb-2">
          <h1 class="lead text-balance">{title}</h1>
          {description && <h2 class="m-0">{description}</h2>}
          <div class="flex flex-row items-baseline gap-6">
            <div>
              {pubDate && <FormattedDate date={pubDate} />}
              {
                updatedDate && (
                  <div>
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            <span class="flex gap-2">
              {
                tags
                  .sort((a: string, b: string): any => a.localeCompare(b))
                  .map((tag: any): any => (
                    <PillButton
                      className="text-gray-500 bg-gray-200 uppercase"
                      href={`/tags/${tag}`}
                    >
                      {tag}
                    </PillButton>
                  ))
              }
            </span>
            <div class="ms-auto text-gray-500 text-sm uppercase">
              {readingTime}
            </div>
          </div>
        </header>
        <slot />
        <center class="py-4">
          <SubscribeButton center={true} />
        </center>
      </article>
    </main>
  </BaseLayout>
  <script is:inline>
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let header = document.createElement("div");
      header.className = "flex flex-row items-center gap-1 w-full h-12";
      let dot = document.createElement("div");
      dot.className = "rounded-full w-3 h-3 bg-red-400";
      header.appendChild(dot);
      dot = document.createElement("div");
      dot.className = "rounded-full w-3 h-3 bg-yellow-400";
      header.appendChild(dot);
      dot = document.createElement("div");
      dot.className = "rounded-full w-3 h-3 bg-green-400";
      header.appendChild(dot);

      let copyButton = document.createElement("button");
      copyButton.className =
        "ml-auto rounded-md border-[1px] border-solid border-gray-400 text-sm text-gray-400 p-1 hover:bg-gray-200 hover:text-black";
      copyButton.innerHTML = copyButtonLabel;

      header.appendChild(copyButton);
      codeBlock.setAttribute("tabindex", "0");

      let wrapper = document.createElement("div");
      wrapper.className =
        "flex flex-col px-2 bg-sky rounded-md shadow-md shadow-sky-300";
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      codeBlock.className = "mt-0";
      codeBlock.style.backgroundColor = "transparent";
      wrapper.prepend(header);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code.innerText;

      await navigator.clipboard.writeText(text);

      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  </script>


</html>
