---
import BaseLayout from "./BaseLayout.astro";
import BlogPostJSONLD from "../components/BlogPostJSONLD.astro";
import FormattedDate from "../components/FormattedDate";
import { Section } from "@/components/ui/section";
import { Badge } from "@/components/ui/badge";
import { SubscribeButton } from "@/components/ui/subscribe-button";
import { getReadingTime } from "../utils/getReadingTime";

const { post } = Astro.props;
const readingTime = getReadingTime(post.body);
const { title, description, pubDate, updatedDate, tags } = post.data;
---

<BaseLayout {...post.data}>
  <BlogPostJSONLD slot="head" {...post.data} />
  <Section variant="light" className="pt-[60px]">
    <article
      class="prose
          prose-h1:capitalize
          prose-h1:mb-2
          prose-h1:font-medium
          prose-h2:font-normal
          prose-h2:mb-4
          prose-h2:mt-3
          prose-p:my-2
          prose-pre:font-code
          prose-pre:rounded-none
          prose-blockquote:font-light
          prose-img:w-full
          mx-auto px-2"
    >
      <header class="border-b-[1px] border-solid border-slate-300 pb-2">
        <h1 class="lead text-balance">{title}</h1>
        {description && <h2 class="m-0">{description}</h2>}
        <div class="flex flex-row items-baseline gap-6 text-sm uppercase">
          <div>
            {pubDate && <FormattedDate date={pubDate} />}
            {
              updatedDate && (
                <div>
                  Last updated on <FormattedDate date={updatedDate} />
                </div>
              )
            }
          </div>
          <span class="flex gap-2">
            {
              tags
                .sort((a: string, b: string): any => a.localeCompare(b))
                .map((tag: any): any => (
                  <Badge variant="secondary">
                    <a href={`/tags/${tag}`} class="no-underline">
                      {tag}
                    </a>
                  </Badge>
                ))
            }
          </span>
          <div class="ms-auto text-gray-500">
            {readingTime}
          </div>
        </div>
      </header>
      <slot />
      <center class="py-28 space-y-2 border-t border-slate-300">
        <p class="text-slate-500">
          Get updates on new posts, articles, and more:
        </p>
        <SubscribeButton />
      </center>
    </article>
  </Section>
  <script is:inline>
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let header = document.createElement("div");
      header.className = "flex flex-row items-center gap-1 w-full h-12";
      let dot = document.createElement("div");
      dot.className = "rounded-full w-3 h-3 bg-red-400";
      header.appendChild(dot);
      dot = document.createElement("div");
      dot.className = "rounded-full w-3 h-3 bg-yellow-400";
      header.appendChild(dot);
      dot = document.createElement("div");
      dot.className = "rounded-full w-3 h-3 bg-green-400";
      header.appendChild(dot);

      let copyButton = document.createElement("button");
      copyButton.className =
        "ml-auto rounded-md border-[1px] border-solid border-gray-400 text-sm text-gray-400 p-1 hover:bg-gray-200 hover:text-black";
      copyButton.innerHTML = copyButtonLabel;

      header.appendChild(copyButton);
      codeBlock.setAttribute("tabindex", "0");

      let wrapper = document.createElement("div");
      wrapper.className =
        "flex flex-col px-2 my-6 bg-sky rounded-md shadow-md shadow-sky-300";
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      codeBlock.className = "mt-0";
      codeBlock.style.backgroundColor = "transparent";
      wrapper.prepend(header);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code.innerText;

      await navigator.clipboard.writeText(text);

      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  </script>
</BaseLayout>
