---
import BaseLayout from "./BaseLayout.astro";
import Comments from "../components/Comments.astro";
import FormattedDate from "../components/FormattedDate.astro";
import Tag from "../components/Tag.astro";
import SubscribeButton from "../components/SubscribeButton.astro";
import { getReadingTime } from "../utils/getReadingTime";

const { post } = Astro.props;
const readingTime = getReadingTime(post.body);
const { title, description, pubDate, updatedDate, tags } = post.data;
---

<html lang="en">
  <BaseLayout title={title} description={description}>
    <main>
      <article
        class="prose
          prose-headings:font-syne
          prose-h1:uppercase
          prose-h1:font-syne
          prose-h1:font-semibold
          prose-p:my-2
          prose-pre:font-code
          prose-pre:rounded-none
          prose-blockquote:font-light
          mx-auto px-2"
      >
        <header class="border-b-[1px] border-solid border-gray-400 pb-2">
          <h1 class="lead text-balance">{title}</h1>
          {description && <h2 class="m-0">{description}</h2>}
          <div class="flex flex-row items-baseline gap-6">
            <div>
              {pubDate && <FormattedDate date={pubDate} />}
              {
                updatedDate && (
                  <div>
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            <span class="flex gap-2">
              {
                tags
                  .sort((a: string, b: string): any => b.localeCompare(a))
                  .map((tag: any): any => <Tag value={tag} />)
              }
            </span>
            <div class="ms-auto text-gray-500 text-sm uppercase">
              {readingTime}
            </div>
          </div>
        </header>
        <slot />
        <center>
          <SubscribeButton />
        </center>
        <Comments />
      </article>
    </main>
  </BaseLayout>
  <script is:inline>
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let header = document.createElement("div");
      header.className = "flex flex-row items-center gap-1 w-full h-12";
      let dot = document.createElement("div");
      dot.className =
        "rounded-full w-3 h-3 border-[2px] border-solid border-red-200";
      header.appendChild(dot);
      dot = document.createElement("div");
      dot.className =
        "rounded-full w-3 h-3 border-[2px] border-solid border-yellow-200";
      header.appendChild(dot);
      dot = document.createElement("div");
      dot.className =
        "rounded-full w-3 h-3 border-[2px] border-solid border-green-200";
      header.appendChild(dot);

      let copyButton = document.createElement("button");
      copyButton.className =
        "ml-auto border-[1px] border-solid border-gray-200 text-sm text-gray-400 p-1";
      copyButton.innerHTML = copyButtonLabel;

      header.appendChild(copyButton);
      codeBlock.setAttribute("tabindex", "0");

      let wrapper = document.createElement("div");
      wrapper.className = "flex flex-col shadow-md p-2";
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      codeBlock.className = "mt-0";
      wrapper.prepend(header);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code.innerText;

      await navigator.clipboard.writeText(text);

      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  </script>


</html>
